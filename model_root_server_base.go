/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
	"time"
)

// checks if the RootServerBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RootServerBase{}

// RootServerBase struct for RootServerBase
type RootServerBase struct {
	SourceId *int32 `json:"sourceId,omitempty"`
	Name *string `json:"name,omitempty"`
	Url *string `json:"url,omitempty"`
	Statistics *RootServerBaseStatistics `json:"statistics,omitempty"`
	ServerInfo *string `json:"serverInfo,omitempty"`
	LastSuccessfulImport *time.Time `json:"lastSuccessfulImport,omitempty"`
}

// NewRootServerBase instantiates a new RootServerBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRootServerBase() *RootServerBase {
	this := RootServerBase{}
	return &this
}

// NewRootServerBaseWithDefaults instantiates a new RootServerBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRootServerBaseWithDefaults() *RootServerBase {
	this := RootServerBase{}
	return &this
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *RootServerBase) GetSourceId() int32 {
	if o == nil || IsNil(o.SourceId) {
		var ret int32
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootServerBase) GetSourceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *RootServerBase) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given int32 and assigns it to the SourceId field.
func (o *RootServerBase) SetSourceId(v int32) {
	o.SourceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RootServerBase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootServerBase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RootServerBase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RootServerBase) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RootServerBase) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootServerBase) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RootServerBase) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RootServerBase) SetUrl(v string) {
	o.Url = &v
}

// GetStatistics returns the Statistics field value if set, zero value otherwise.
func (o *RootServerBase) GetStatistics() RootServerBaseStatistics {
	if o == nil || IsNil(o.Statistics) {
		var ret RootServerBaseStatistics
		return ret
	}
	return *o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootServerBase) GetStatisticsOk() (*RootServerBaseStatistics, bool) {
	if o == nil || IsNil(o.Statistics) {
		return nil, false
	}
	return o.Statistics, true
}

// HasStatistics returns a boolean if a field has been set.
func (o *RootServerBase) HasStatistics() bool {
	if o != nil && !IsNil(o.Statistics) {
		return true
	}

	return false
}

// SetStatistics gets a reference to the given RootServerBaseStatistics and assigns it to the Statistics field.
func (o *RootServerBase) SetStatistics(v RootServerBaseStatistics) {
	o.Statistics = &v
}

// GetServerInfo returns the ServerInfo field value if set, zero value otherwise.
func (o *RootServerBase) GetServerInfo() string {
	if o == nil || IsNil(o.ServerInfo) {
		var ret string
		return ret
	}
	return *o.ServerInfo
}

// GetServerInfoOk returns a tuple with the ServerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootServerBase) GetServerInfoOk() (*string, bool) {
	if o == nil || IsNil(o.ServerInfo) {
		return nil, false
	}
	return o.ServerInfo, true
}

// HasServerInfo returns a boolean if a field has been set.
func (o *RootServerBase) HasServerInfo() bool {
	if o != nil && !IsNil(o.ServerInfo) {
		return true
	}

	return false
}

// SetServerInfo gets a reference to the given string and assigns it to the ServerInfo field.
func (o *RootServerBase) SetServerInfo(v string) {
	o.ServerInfo = &v
}

// GetLastSuccessfulImport returns the LastSuccessfulImport field value if set, zero value otherwise.
func (o *RootServerBase) GetLastSuccessfulImport() time.Time {
	if o == nil || IsNil(o.LastSuccessfulImport) {
		var ret time.Time
		return ret
	}
	return *o.LastSuccessfulImport
}

// GetLastSuccessfulImportOk returns a tuple with the LastSuccessfulImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootServerBase) GetLastSuccessfulImportOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSuccessfulImport) {
		return nil, false
	}
	return o.LastSuccessfulImport, true
}

// HasLastSuccessfulImport returns a boolean if a field has been set.
func (o *RootServerBase) HasLastSuccessfulImport() bool {
	if o != nil && !IsNil(o.LastSuccessfulImport) {
		return true
	}

	return false
}

// SetLastSuccessfulImport gets a reference to the given time.Time and assigns it to the LastSuccessfulImport field.
func (o *RootServerBase) SetLastSuccessfulImport(v time.Time) {
	o.LastSuccessfulImport = &v
}

func (o RootServerBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RootServerBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Statistics) {
		toSerialize["statistics"] = o.Statistics
	}
	if !IsNil(o.ServerInfo) {
		toSerialize["serverInfo"] = o.ServerInfo
	}
	if !IsNil(o.LastSuccessfulImport) {
		toSerialize["lastSuccessfulImport"] = o.LastSuccessfulImport
	}
	return toSerialize, nil
}

type NullableRootServerBase struct {
	value *RootServerBase
	isSet bool
}

func (v NullableRootServerBase) Get() *RootServerBase {
	return v.value
}

func (v *NullableRootServerBase) Set(val *RootServerBase) {
	v.value = val
	v.isSet = true
}

func (v NullableRootServerBase) IsSet() bool {
	return v.isSet
}

func (v *NullableRootServerBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRootServerBase(val *RootServerBase) *NullableRootServerBase {
	return &NullableRootServerBase{value: val, isSet: true}
}

func (v NullableRootServerBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRootServerBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


