/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
)

// checks if the ErrorTest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorTest{}

// ErrorTest struct for ErrorTest
type ErrorTest struct {
	ArbitraryString *string `json:"arbitrary_string,omitempty"`
	ArbitraryInt *int32 `json:"arbitrary_int,omitempty"`
	ForceServerError *bool `json:"force_server_error,omitempty"`
}

// NewErrorTest instantiates a new ErrorTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorTest() *ErrorTest {
	this := ErrorTest{}
	return &this
}

// NewErrorTestWithDefaults instantiates a new ErrorTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorTestWithDefaults() *ErrorTest {
	this := ErrorTest{}
	return &this
}

// GetArbitraryString returns the ArbitraryString field value if set, zero value otherwise.
func (o *ErrorTest) GetArbitraryString() string {
	if o == nil || IsNil(o.ArbitraryString) {
		var ret string
		return ret
	}
	return *o.ArbitraryString
}

// GetArbitraryStringOk returns a tuple with the ArbitraryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorTest) GetArbitraryStringOk() (*string, bool) {
	if o == nil || IsNil(o.ArbitraryString) {
		return nil, false
	}
	return o.ArbitraryString, true
}

// HasArbitraryString returns a boolean if a field has been set.
func (o *ErrorTest) HasArbitraryString() bool {
	if o != nil && !IsNil(o.ArbitraryString) {
		return true
	}

	return false
}

// SetArbitraryString gets a reference to the given string and assigns it to the ArbitraryString field.
func (o *ErrorTest) SetArbitraryString(v string) {
	o.ArbitraryString = &v
}

// GetArbitraryInt returns the ArbitraryInt field value if set, zero value otherwise.
func (o *ErrorTest) GetArbitraryInt() int32 {
	if o == nil || IsNil(o.ArbitraryInt) {
		var ret int32
		return ret
	}
	return *o.ArbitraryInt
}

// GetArbitraryIntOk returns a tuple with the ArbitraryInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorTest) GetArbitraryIntOk() (*int32, bool) {
	if o == nil || IsNil(o.ArbitraryInt) {
		return nil, false
	}
	return o.ArbitraryInt, true
}

// HasArbitraryInt returns a boolean if a field has been set.
func (o *ErrorTest) HasArbitraryInt() bool {
	if o != nil && !IsNil(o.ArbitraryInt) {
		return true
	}

	return false
}

// SetArbitraryInt gets a reference to the given int32 and assigns it to the ArbitraryInt field.
func (o *ErrorTest) SetArbitraryInt(v int32) {
	o.ArbitraryInt = &v
}

// GetForceServerError returns the ForceServerError field value if set, zero value otherwise.
func (o *ErrorTest) GetForceServerError() bool {
	if o == nil || IsNil(o.ForceServerError) {
		var ret bool
		return ret
	}
	return *o.ForceServerError
}

// GetForceServerErrorOk returns a tuple with the ForceServerError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorTest) GetForceServerErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceServerError) {
		return nil, false
	}
	return o.ForceServerError, true
}

// HasForceServerError returns a boolean if a field has been set.
func (o *ErrorTest) HasForceServerError() bool {
	if o != nil && !IsNil(o.ForceServerError) {
		return true
	}

	return false
}

// SetForceServerError gets a reference to the given bool and assigns it to the ForceServerError field.
func (o *ErrorTest) SetForceServerError(v bool) {
	o.ForceServerError = &v
}

func (o ErrorTest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArbitraryString) {
		toSerialize["arbitrary_string"] = o.ArbitraryString
	}
	if !IsNil(o.ArbitraryInt) {
		toSerialize["arbitrary_int"] = o.ArbitraryInt
	}
	if !IsNil(o.ForceServerError) {
		toSerialize["force_server_error"] = o.ForceServerError
	}
	return toSerialize, nil
}

type NullableErrorTest struct {
	value *ErrorTest
	isSet bool
}

func (v NullableErrorTest) Get() *ErrorTest {
	return v.value
}

func (v *NullableErrorTest) Set(val *ErrorTest) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorTest) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorTest(val *ErrorTest) *NullableErrorTest {
	return &NullableErrorTest{value: val, isSet: true}
}

func (v NullableErrorTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


