/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
)

// FormatPartialUpdate struct for FormatPartialUpdate
type FormatPartialUpdate struct {
	WorldId *string `json:"worldId,omitempty"`
	Type *string `json:"type,omitempty"`
	Translations []FormatTranslation `json:"translations,omitempty"`
}

// NewFormatPartialUpdate instantiates a new FormatPartialUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormatPartialUpdate() *FormatPartialUpdate {
	this := FormatPartialUpdate{}
	return &this
}

// NewFormatPartialUpdateWithDefaults instantiates a new FormatPartialUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormatPartialUpdateWithDefaults() *FormatPartialUpdate {
	this := FormatPartialUpdate{}
	return &this
}

// GetWorldId returns the WorldId field value if set, zero value otherwise.
func (o *FormatPartialUpdate) GetWorldId() string {
	if o == nil || o.WorldId == nil {
		var ret string
		return ret
	}
	return *o.WorldId
}

// GetWorldIdOk returns a tuple with the WorldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatPartialUpdate) GetWorldIdOk() (*string, bool) {
	if o == nil || o.WorldId == nil {
		return nil, false
	}
	return o.WorldId, true
}

// HasWorldId returns a boolean if a field has been set.
func (o *FormatPartialUpdate) HasWorldId() bool {
	if o != nil && o.WorldId != nil {
		return true
	}

	return false
}

// SetWorldId gets a reference to the given string and assigns it to the WorldId field.
func (o *FormatPartialUpdate) SetWorldId(v string) {
	o.WorldId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormatPartialUpdate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatPartialUpdate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormatPartialUpdate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FormatPartialUpdate) SetType(v string) {
	o.Type = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *FormatPartialUpdate) GetTranslations() []FormatTranslation {
	if o == nil || o.Translations == nil {
		var ret []FormatTranslation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatPartialUpdate) GetTranslationsOk() ([]FormatTranslation, bool) {
	if o == nil || o.Translations == nil {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *FormatPartialUpdate) HasTranslations() bool {
	if o != nil && o.Translations != nil {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []FormatTranslation and assigns it to the Translations field.
func (o *FormatPartialUpdate) SetTranslations(v []FormatTranslation) {
	o.Translations = v
}

func (o FormatPartialUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WorldId != nil {
		toSerialize["worldId"] = o.WorldId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Translations != nil {
		toSerialize["translations"] = o.Translations
	}
	return json.Marshal(toSerialize)
}

type NullableFormatPartialUpdate struct {
	value *FormatPartialUpdate
	isSet bool
}

func (v NullableFormatPartialUpdate) Get() *FormatPartialUpdate {
	return v.value
}

func (v *NullableFormatPartialUpdate) Set(val *FormatPartialUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFormatPartialUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFormatPartialUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormatPartialUpdate(val *FormatPartialUpdate) *NullableFormatPartialUpdate {
	return &NullableFormatPartialUpdate{value: val, isSet: true}
}

func (v NullableFormatPartialUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormatPartialUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


