/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
)

// FormatTranslation struct for FormatTranslation
type FormatTranslation struct {
	Key string `json:"key"`
	Name string `json:"name"`
	Description string `json:"description"`
	Language string `json:"language"`
}

// NewFormatTranslation instantiates a new FormatTranslation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormatTranslation(key string, name string, description string, language string) *FormatTranslation {
	this := FormatTranslation{}
	this.Key = key
	this.Name = name
	this.Description = description
	this.Language = language
	return &this
}

// NewFormatTranslationWithDefaults instantiates a new FormatTranslation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormatTranslationWithDefaults() *FormatTranslation {
	this := FormatTranslation{}
	return &this
}

// GetKey returns the Key field value
func (o *FormatTranslation) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *FormatTranslation) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *FormatTranslation) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *FormatTranslation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FormatTranslation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FormatTranslation) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *FormatTranslation) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FormatTranslation) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FormatTranslation) SetDescription(v string) {
	o.Description = v
}

// GetLanguage returns the Language field value
func (o *FormatTranslation) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *FormatTranslation) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *FormatTranslation) SetLanguage(v string) {
	o.Language = v
}

func (o FormatTranslation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["language"] = o.Language
	}
	return json.Marshal(toSerialize)
}

type NullableFormatTranslation struct {
	value *FormatTranslation
	isSet bool
}

func (v NullableFormatTranslation) Get() *FormatTranslation {
	return v.value
}

func (v *NullableFormatTranslation) Set(val *FormatTranslation) {
	v.value = val
	v.isSet = true
}

func (v NullableFormatTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableFormatTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormatTranslation(val *FormatTranslation) *NullableFormatTranslation {
	return &NullableFormatTranslation{value: val, isSet: true}
}

func (v NullableFormatTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormatTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


